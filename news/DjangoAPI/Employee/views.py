
from rest_framework import generics, permissions
from rest_framework import status
from rest_framework.response import Response
from rest_framework.decorators import api_view , permission_classes
from .serializers import UserRegistrationSerializer ,  PostSerializer
from .models import User, Post
from bson import ObjectId
from django.contrib.auth.hashers import check_password
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.permissions import IsAuthenticated
@api_view(['POST'])
def register(request):
    if request.method == 'POST':
        data = request.data
        
        if User.objects.filter(email=data["email"]).exists():
              return Response({"message": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É'''—î!"}, status=status.HTTP_400_BAD_REQUEST)
        serializer = UserRegistrationSerializer(data=data)
        if serializer.is_valid():
            serializer.save()
            return Response({'message': 'User created successfully', 'email': serializer.data['email']}, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)




@api_view(['GET'])

def get_user_by_id(request, user_id):
    # –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ _id
    try:
        user = User.objects.get(_id=ObjectId(user_id))  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–ª–µ _id
    except User.DoesNotExist:
        return Response({'message': 'User not found'}, status=status.HTTP_404_NOT_FOUND)
    
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π, —Å–µ—Ä—ñ–∞–ª—ñ–∑—É—î–º–æ –π–æ–≥–æ –¥–∞–Ω—ñ
    serializer = UserRegistrationSerializer(user)   
    return Response(serializer.data )



@api_view(['POST'])
def login_user(request):
    email = request.data.get('email')
    password = request.data.get('password')

    # üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∫–∞–∑–∞–Ω—ñ –≤—Å—ñ –ø–æ–ª—è
    if not email or not password:
        return Response({'message': 'Email —Ç–∞ –ø–∞—Ä–æ–ª—å –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ!'}, status=status.HTTP_400_BAD_REQUEST)

    # üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î
    try:
        user = User.objects.get(email=email)
    except User.DoesNotExist:
        return Response({'message': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º email –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!'}, status=status.HTTP_404_NOT_FOUND)

    # üîπ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –ø–∞—Ä–æ–ª—è
    if not check_password(password, user.password):  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ check_password()
        return Response({'message': '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å!'}, status=status.HTTP_400_BAD_REQUEST)

    # üîπ –ì–µ–Ω–µ—Ä—É—î–º–æ JWT-—Ç–æ–∫–µ–Ω–∏
    refresh = RefreshToken.for_user(user)
    return Response({
        'refresh': str(refresh),
        'access': str(refresh.access_token),
        'message': '–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π!',
        'user': {
            '_id': str(user._id),
            'email': user.email,
            'username': user.username,
            
        }
    }, status=status.HTTP_200_OK)



@api_view(['POST'])
@permission_classes([IsAuthenticated])
def create_post(request):
    data = request.data
    data['author'] = ObjectId(request.user._id)  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞
    serializer = PostSerializer(data=data)

    if serializer.is_valid():
        serializer.save()
        return Response(serializer.data, status=status.HTTP_201_CREATED)
    
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)